from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from keyboards.inline.choose_game_kb import game_kb, get_edit_game_kb
from keyboards.inline.edit_add import edit_kb_add
from keyboards.inline.edit_self_keyboard import edit_kb
from loader import dp
from states.get_info import GetInfo
from utils.db_api.db_commands import get_user_info, get_game_by_id, get_user, create_row_adds, get_info_row, update_game


@dp.message_handler(text='üì© –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def new_add_user(message: types.Message):
    '''–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ—ã –æ —á–µ–ª–æ–≤–µ–∫–µ'''

    data = await get_user_info(message.from_user.id)

    if data:
        await message.answer('‚ùå –£ —Ç–µ–±—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n', reply_markup=edit_kb)
    else:
        add = await get_info_row(message.from_user.id)

        if add is not None:
            await message.answer('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n'
                                 f'{add.name} ({add.nickname}), {add.age} –ª–µ—Ç, {add.game}\n\n'
                                 f'{add.description}\n\n'
                                 f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=edit_kb_add)
        else:
            keyboard = await game_kb()
            await message.delete()

            await message.answer('–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='game_'))
async def get_game(call: types.CallbackQuery):
    data = int(call.data.split('_')[1])
    game_name = await get_game_by_id(data)
    await GetInfo.description.set()

    state = dp.current_state(
        chat=call.message.chat.id,
        user=call.from_user.id
    )

    await state.update_data(
        {
            'game': game_name.name
        }
    )

    await call.message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å–≤–æ–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é\n'
                              '(<i>—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∫ –ø—Ä–∏–º–µ—Ä—É, —Ä–µ–∂–∏–º –∏–≥—Ä—ã, —Ç–≤–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É —Ç–∏–º–º–µ–π—Ç—É –∏ —Ç.–¥.</i>)')


@dp.message_handler(state=GetInfo.description)
async def get_description(message: types.Message, state: FSMContext):
    '''–¢–∞–∫ –∂–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–≤—è–∑–∫—É –∫ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –¥–∞–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π'''
    description = message.text

    data = await state.get_data()

    user_data = await get_user(message.from_user.id)

    game = data.get('game')

    await message.answer('–¢–µ–ø–µ—Ä—å —Ç–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n'
                         f'{user_data.name} ({user_data.nickname}), {user_data.age} –ª–µ—Ç, {game}\n\n'
                         f'{description}')

    await create_row_adds(
        owner_id=message.from_user.id,
        name=user_data.name,
        nickname=user_data.nickname,
        age=user_data.age,
        description=description,
        game=game
    )

    await state.reset_state(True)


@dp.callback_query_handler(Text(equals='edit_game'))
async def edit_user_game(call: types.CallbackQuery):
    keyboard = await get_edit_game_kb()

    await call.message.edit_text('–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith='egame_'))
async def get_edit_game(call: types.CallbackQuery):
    data = int(call.data.split('_')[1])
    game = await get_game_by_id(data)
    await update_game(
        owner_id=call.from_user.id,
        game=game.name
    )
    await call.message.edit_text(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–≥—Ä—É –Ω–∞ {game.name}')
